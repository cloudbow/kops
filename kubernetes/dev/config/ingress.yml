# Source: slingtv-sports-cloud-apps/charts/sc-monitoring/charts/default-http-backend/templates/deployment.yaml
# ------------------- SparkUI Proxy1  Deployment ------------------- #
apiVersion: apps/v1beta2 # for versions before 1.8.0 use apps/v1beta1
kind: Deployment
metadata:
  name: sc-apps-dev-default-http-backend
  labels:
    app: default-http-backend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: default-http-backend
  template:
    metadata:
      labels:
        app: default-http-backend
    spec:
      terminationGracePeriodSeconds: 60
      containers:
      - name: default-http-backend
        image: gcr.io/google_containers/defaultbackend:1.0
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 30
          timeoutSeconds: 5
        ports:
        - containerPort: 8080
        resources:
          limits:
            cpu: 10m
            memory: 20Mi
          requests:
            cpu: 10m
            memory: 20Mi
---
# Source: slingtv-sports-cloud-apps/charts/sc-monitoring/charts/default-http-backend/templates/service.yaml
# -------------------  Default Http Backend Service ------------------- #
apiVersion: v1
kind: Service
metadata:
  name: sc-apps-dev-default-http-backend
  labels:
    app: default-http-backend
spec:
  selector:
    app: default-http-backend
  type: NodePort
  ports:
  - name: default-http-backend
    port: 80
    targetPort:  8080
    protocol: TCP
---    
# Source: slingtv-sports-cloud-apps/charts/sc-services/templates/ingress-controller.yaml
# Application Load Balancer (ALB) Ingress Controller Deployment Manifest.
# This manifest details sensible defaults for deploying an ALB Ingress Controller.
# GitHub: https://github.com/coreos/alb-ingress-controller
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    app: sc-apps-dev-alb-ingress-controller
  name: sc-apps-dev-alb-ingress-controller
  # Namespace the ALB Ingress Controller should run in. Does not impact which
  # namespaces it's able to resolve ingress resource for. For limiting ingress
  # namespace scope, see --watch-namespace.
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: sc-apps-dev-alb-ingress-controller
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: sc-apps-dev-alb-ingress-controller
    spec:
      containers:
      - args:
        - /server
        # Ingress controllers must have a default backend deployment where
        # all unknown locations can be routed to. Often this is a 404 page. The
        # default backend is not particularly helpful to the ALB Ingress Controller
        # but is still required. The default backend and its respective service
        # must be running Kubernetes for this controller to start.
        - --default-backend-service=default/sc-apps-dev-default-http-backend
        # Limit the namespace where this ALB Ingress Controller deployment will
        # resolve ingress resources. If left commented, all namespaces are used.
        #- --watch-namespace=your-k8s-namespace
        # Setting the ingress-class flag below will ensure that only ingress resources with the
        # annotation kubernetes.io/ingress.class: "alb" are respected by the controller. You may
        # choose any class you'd like for this controller to respect.
        #- --ingress-class=alb
        env:
        - name: "AWS_ACCESS_KEY_ID"
          value: "AKIAI2L3MWG32WAGY5HQ"
        - name: "AWS_DEBUG"
          value: "false"
        - name: "AWS_REGION"
          value: "us-east-2"
        - name: "AWS_SECRET_ACCESS_KEY"
          value: "mdM+g7nBL0al4S+HfN+ArDjsyBep+XNO6PB98x65"
        - name: "CLUSTER_NAME"
          value: "sports-cloud.k8s.local"
        - name: POD_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        # Repository location of the ALB Ingress Controller.
        image: quay.io/coreos/alb-ingress-controller:1.0-alpha.7
        imagePullPolicy: Always
        name: server
        resources: {}
        terminationMessagePath: /dev/termination-log
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      securityContext: {}
      terminationGracePeriodSeconds: 30
---
# Source: slingtv-sports-cloud-apps/charts/sc-services/templates/ingress.yaml
# -------------------- Ingress controller --------------------- #
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: sc-apps-dev-sports-cloud-ingress
  annotations:
    alb.ingress.kubernetes.io/scheme: internet-facing
    #alb.ingress.kubernetes.io/subnets: subnet-23deac4b,subnet-c3268db9
    #alb.ingress.kubernetes.io/security-groups: #alb-security-group#
    alb.ingress.kubernetes.io/tags: Environment=dev,Team=sports-cloud
    ingress.kubernetes.io/rewrite-target: /
spec:
  rules:
  - host: intsportscloud.slingbox.com
    http:
      paths:
      - path: /
        backend:
          serviceName: sc-apps-dev-kubernetes-dashboard
          servicePort: 80
      - path: /api/*
        backend:
          serviceName: sc-apps-dev-sc-rest-layer
          servicePort: 9080
  - host: intsc-prometheus.slingbox.com
    http:
      paths:
      - backend:
          serviceName: sc-apps-dev-prometheus-server
          servicePort: 80
  - host: intsc-monitoring.slingbox.com
    http:
      paths:
      - backend:
          serviceName: sc-apps-dev-grafana
          servicePort: 80
  - host: intsc-kibana.slingbox.com
    http:
      paths:
      - backend:
          serviceName: sc-apps-dev-kibana
          servicePort: 80
  - host: intsc-zeppelin.slingbox.com
    http:
      paths:
      - backend:
          serviceName: sc-apps-dev-zeppelin
          servicePort: 80
  - host: intsc-spui1.slingbox.com
    http:
      paths:
      - backend:
          serviceName: sc-apps-dev-spark-ui-proxy-1
          servicePort: 80
  - host: intsc-spui2.slingbox.com
    http:
      paths:
      - backend:
          serviceName: sc-apps-dev-spark-ui-proxy-2
          servicePort: 80
---