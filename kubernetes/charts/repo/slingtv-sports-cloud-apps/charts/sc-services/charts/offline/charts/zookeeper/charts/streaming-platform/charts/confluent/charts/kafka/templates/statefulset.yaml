# ------------------- Kafka stateful set ------------------- #
apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: {{ template "kafka.fullname" . }}
  labels:
    app: {{ template "kafka.name" . }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    release: {{ .Release.Name }}
spec:
  serviceName: {{ template "kafka.fullname" . }}-hs
  replicas: {{ .Values.deployment.replicas }}
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: {{ template "kafka.name" . }}
        release: {{ .Release.Name }}
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: "app"
                    operator: In
                    values:
                    - {{ template "kafka.name" . }}
              topologyKey: "kubernetes.io/hostname"
        podAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
             - weight: 1
               podAffinityTerm:
                 labelSelector:
                    matchExpressions:
                      - key: "app"
                        operator: In
                        values:
                        - {{ .Values.deployment.affineapp }}
                 topologyKey: "kubernetes.io/hostname"
      terminationGracePeriodSeconds: {{ .Values.deployment.terminationGracePeriodSeconds }}
      containers:
      - name: {{ .Chart.Name }}
        image: {{ .Values.global.repository }}/{{ .Values.image.tag }}
        command: ["/scripts/kafka-server-start.sh"]
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        resources:
          limits:  
            cpu: {{ .Values.deployment.resources.maxCpu }}
            memory: {{ .Values.deployment.resources.maxMem }}
          requests:
            memory: {{ .Values.deployment.resources.minMem }}
            cpu: {{ .Values.deployment.resources.minCpu }}
        ports:
        - containerPort: {{ .Values.deployment.containerPort }}
        env:
        {{- range $key, $value := .Values.image.env }}
        - name: "{{ $key }}"
          value: "{{ $value }}"
        {{- end }}
        - name: KAFKA_ZOOKEEPER_CONNECT
          value: "{{ .Release.Name }}-zookeeper.default.svc.cluster.local:2181"        
        - name: KAFKA_ADVERTISED_HOST_NAME
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        volumeMounts:
        - name: {{ template "kafka.fullname" . }}-data
          mountPath: /var/lib/kafka/data
  volumeClaimTemplates:
  - metadata:
      name: {{ template "kafka.fullname" . }}-data
    spec:
      storageClassName: {{ .Release.Name }}-datastore
      accessModes: [ ReadWriteOnce ]
      resources:
        requests:
          storage: {{ .Values.deployment.data.storage }}