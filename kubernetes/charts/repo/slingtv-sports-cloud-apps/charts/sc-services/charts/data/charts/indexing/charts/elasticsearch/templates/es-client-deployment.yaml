# ------------------- Elastic Search Client Deployment  --------------------------------------------------- #
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: {{ template "elasticsearch.fullname" . }}-client
  labels:
    app: {{ template "elasticsearch.name" . }}
    release: {{ .Release.Name }}
    role: {{ .Values.deployment.client.role }}
spec:
  replicas: {{ .Values.deployment.client.replicas }}
  template:
    metadata:
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9200"
        prometheus.io/path: "/_prometheus/metrics"
      labels:
        app: {{ template "elasticsearch.name" . }}
        release: {{ .Release.Name }}
        role: {{ .Values.deployment.client.role }}
    spec:
      initContainers:
      - name: init-sysctl
        image: busybox
        imagePullPolicy: IfNotPresent
        command: ["sysctl", "-w", "vm.max_map_count=262144"]
        securityContext:
          privileged: true
      containers:
      - name: {{ .Chart.Name }}-client
        securityContext:
          privileged: false
          capabilities:
            add:
              - IPC_LOCK
              - SYS_RESOURCE
        image: {{ .Values.global.repository }}/{{ .Values.image.tag }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        resources:
          limits:  
            cpu: {{ .Values.deployment.client.resources.maxCpu }}
            memory: {{ .Values.deployment.client.resources.maxMem }}
          requests:
            memory: {{ .Values.deployment.client.resources.minMem }}
            cpu: {{ .Values.deployment.client.resources.minCpu }}         
        env:
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: CLUSTER_NAME
          value: {{ .Release.Name }}-elasticsearch
        - name: DISCOVERY_SERVICE
          value: {{ .Release.Name }}-elasticsearch-discovery
        {{- range $key, $value := .Values.deployment.client.env }}
        - name: "{{ $key }}"
          value: "{{ $value }}"
        {{- end }}
        ports:
        {{- range $key, $value := .Values.deployment.client.ports }}
        - containerPort:  {{ $value }}
          name: "{{ $key }}"
          protocol: TCP
        {{- end }}
        livenessProbe:
          tcpSocket:
            port: {{ .Values.deployment.client.livenessProbe.port }}
        readinessProbe:
          httpGet:
            path: /_cluster/health
            port: {{ .Values.deployment.client.readinessProbe.port }}
          initialDelaySeconds:  {{ .Values.deployment.client.readinessProbe.initialDelaySeconds }}
          timeoutSeconds:  {{ .Values.deployment.client.readinessProbe.timeoutSeconds }}
        volumeMounts:
        - name: storage
          mountPath: /data
      volumes:
          - emptyDir:
              medium: ""
            name: "storage"